# Define log file path
$LogFile = "C:\lab\logs\UpgradeAllDetect.txt"

# Log a message function
function Log-Message {
    param (
        [string]$Message
    )
    $Timestamp = Get-Date -Format "yyyy-MM-dd HH:mm:ss"
    $FullMessage = "$Timestamp - $Message"
    $FullMessage | Out-File -Append -FilePath $LogFile
}

# Start the script and log the initiation
Log-Message "Script started."

# Get path for Winget executable
$Winget = ((Get-ChildItem "C:\Program Files\WindowsApps" -Recurse -File | Where-Object { 
    ($_.FullName -match 'C:\\Program Files\\WindowsApps\\Microsoft.DesktopAppInstaller_' -and $_.Name -eq 'winget.exe') 
} | Sort-Object FullName -Descending | Select-Object -First 1).FullName)

# Log Winget path detection
if (-not $Winget) {
    Log-Message "Winget executable not found. Exiting script."
    exit 1
} else {
    Log-Message "Winget executable found at: $Winget"
}

# WinGet version
Log-Message "Retrieving Winget version information..."
& "$Winget" --info 2>&1 | Out-File -Append -FilePath $LogFile

# Update source
Log-Message "Updating Winget sources..."
& "$Winget" source update 2>&1 | Out-File -Append -FilePath $LogFile

# Check for available upgrades
Log-Message "Checking for available upgrades..."
try {
    $UpgradeOutput = & "$Winget" upgrade --accept-source-agreements 2>&1 | Out-String
    $UpgradeOutput | Out-File -Append -FilePath $LogFile
} catch {
    Log-Message "An error occurred while running 'winget upgrade'"
    exit 1
}

# Evaluate the output for the specific phrase
if ($UpgradeOutput -match "No installed package found matching input criteria") {
    Log-Message "No upgrades available. Exiting with code 0."
    exit 0
} else {
    Log-Message "Upgrade(s) available or another condition encountered. Exiting with code 1."
    exit 1
}
